# Import the CSV file
$csvData = Import-Csv -Path "path_to_your_file.csv"

# Filter rows where username has exactly 5 characters, contains both letters and numbers
$filteredData = $csvData | Where-Object { 
    $_.username.Length -eq 5 -and $_.username -match '^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$' 
}

# Initialize a hashtable to cache AD lookup results
$adCache = @{ }

# Create an empty array to store processed results
$processedData = @()

# Batch size to reduce AD lookup calls
$batchSize = 1000

# Process data in batches
$filteredData | ForEach-Object -Begin {
    $batch = @()
} -Process {
    $batch += $_

    if ($batch.Count -ge $batchSize) {
        # Get distinct usernames for batch AD lookup
        $usernames = $batch | Select-Object -ExpandProperty username -Unique

        # Check for any uncached usernames
        $uncachedUsernames = $usernames | Where-Object { -not $adCache.ContainsKey($_) }

        if ($uncachedUsernames.Count -gt 0) {
            # Construct the filter string
            $filterString = ($uncachedUsernames | ForEach-Object { "SamAccountName -eq '$_'" }) -join ' -or '
            
            # Perform the bulk AD lookup with additional properties: Division, Department, Branch, and Manager
            $adUsers = Get-ADUser -Filter $filterString -Property GivenName, Surname, Division, Department, Branch, Manager -ErrorAction SilentlyContinue | 
                        Select-Object SamAccountName, GivenName, Surname, Division, Department, Branch, Manager

            # Store results in the cache
            foreach ($user in $adUsers) {
                $managerName = ""
                if ($user.Manager) {
                    # Fetch manager's name if the user has a manager
                    $manager = Get-ADUser -Identity $user.Manager -Properties GivenName, Surname -ErrorAction SilentlyContinue
                    if ($manager) {
                        $managerName = "$($manager.GivenName) $($manager.Surname)"
                    }
                }

                $adCache[$user.SamAccountName] = @{
                    FullName   = "$($user.GivenName) $($user.Surname)"
                    Division   = $user.Division
                    Department = $user.Department
                    Branch     = $user.Branch
                    Manager    = if ($managerName) { $managerName } else { "Manager not found" }
                }
            }

            # Mark users not found in AD
            foreach ($username in $uncachedUsernames) {
                if (-not $adCache.ContainsKey($username)) {
                    $adCache[$username] = @{

                        FullName   = "User not found in AD"
                        Division   = "N/A"
                        Department = "N/A"
                        Branch     = "N/A"
                        Manager    = "N/A"
                    }
                }
            }
        }

        # Process the batch
        foreach ($row in $batch) {
            $adInfo = $adCache[$row.username]

            $processedData += [PSCustomObject]@{
                Username   = $row.username
                Action     = $row.action
                Time       = $row.time
                FullName   = $adInfo.FullName
                Division   = $adInfo.Division
                Department = $adInfo.Department
                Branch     = $adInfo.Branch
                Manager    = $adInfo.Manager
            }
        }

        # Reset the batch
        $batch = @()
    }
} -End {
    # Process remaining data in the batch
    if ($batch.Count -gt 0) {
        $usernames = $batch | Select-Object -ExpandProperty username -Unique
        $uncachedUsernames = $usernames | Where-Object { -not $adCache.ContainsKey($_) }

        if ($uncachedUsernames.Count -gt 0) {
            $filterString = ($uncachedUsernames | ForEach-Object { "SamAccountName -eq '$_'" }) -join ' -or '
            $adUsers = Get-ADUser -Filter $filterString -Property GivenName, Surname, Division, Department, Branch, Manager -ErrorAction SilentlyContinue |
                        Select-Object SamAccountName, GivenName, Surname, Division, Department, Branch, Manager

            foreach ($user in $adUsers) {
                $managerName = ""
                if ($user.Manager) {
                    # Fetch manager's name if the user has a manager
                    $manager = Get-ADUser -Identity $user.Manager -Properties GivenName, Surname -ErrorAction SilentlyContinue
                    if ($manager) {
                        $managerName = "$($manager.GivenName) $($manager.Surname)"
                    }
                }

                $adCache[$user.SamAccountName] = @{
                    FullName   = "$($user.GivenName) $($user.Surname)"
                    Division   = $user.Division
                    Department = $user.Department
                    Branch     = $user.Branch
                    Manager    = if ($managerName) { $managerName } else { "Manager not found" }
                }
            }

            foreach ($username in $uncachedUsernames) {
                if (-not $adCache.ContainsKey($username)) {
                    $adCache[$username] = @{
                        FullName   = "User not found in AD"
                        Division   = "N/A"
                        Department = "N/A"
                        Branch     = "N/A"
                        Manager    = "N/A"
                    }
                }
            }
        }

        foreach ($row in $batch) {
            $adInfo = $adCache[$row.username]

            $processedData += [PSCustomObject]@{
                Username   = $row.username
                Action     = $row.action
                Time       = $row.time
                FullName   = $adInfo.FullName
                Division   = $adInfo.Division
                Department = $adInfo.Department
                Branch     = $adInfo.Branch
                Manager    = $adInfo.Manager
            }
        }
    }
}

# Export the result to a new CSV file
$processedData | Export-Csv -Path "path_to_output_file.csv" -NoTypeInformation

# Output result to console for verification
$processedData
