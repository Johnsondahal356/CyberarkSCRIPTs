# Add a .NET type with C# code to define a custom policy for trusting all certificates
Add-Type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@

# Set the certificate policy to use the custom TrustAllCertsPolicy
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

# Set the security protocol to use SSL 3.0, TLS 1.0, TLS 1.1, and TLS 1.2
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12

# End of Region

$username = "testscripts"
$password = "Cyberark1"

$URL_Logon = "https://192.168.64.177/passwordvault/api/auth/cyberark/logon"

$logonBody = @{
    username = $username  # Set the username field in the JSON body
    password = $password  # Set the password field in the JSON body
}
$logonBody = $logonBody | ConvertTo-Json  # Convert the PowerShell object to JSON format

try {
    # Logon
    # Make a POST request to the logon URL with the logon body
    $logonResult = Invoke-RestMethod -Method Post -Uri $URL_Logon -Body $logonBody -ContentType "application/json" 
    # Save the Logon Result - The Logon Token
    $logonToken = $logonResult  # Store the logon token returned from the server
} catch {
    # Handle any errors that occur during the logon process
    Write-Host -ForegroundColor Red $_.Exception.Response.StatusDescription  # Display the error message
    $logonToken = ""  # Set the logon token to empty
    write-host $_
}

# If the logon token is empty, display an error message and exit the script
If ($logonToken -eq "") {
    Write-Host -ForegroundColor Red "Logon Token is Empty - Cannot login"  # Display an error message
    exit  # Exit the script
}

# Create a Logon Token Header
# This header will be used throughout the script for authentication
$logonHeader = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$logonHeader.Add("Authorization", $logonToken)  # Add the logon token to the header



$PVWAURL = "https://192.168.64.177/Passwordvault"


$URL_GetSafeDetails = $PVWAURL + "/api/safes/Testing" 

try
{
$GetSafeDetailsInvoke = Invoke-RestMethod -Method Get -Headers $logonHeader -ContentType "application/json" -Uri $URL_GetSafeDetails | ConvertTo-Json 
}

catch
{
Write-Host $_
LogMessage -Message "$ Failed to Fetch Safe Details for $safename"
}

$CSV = Import-Csv "$Path\$File"

foreach ($value in $CSV) {
    $safeName = $value.safeName
    $newDescription = $value.NewDescription
    $newSafeName = $value.NewSafeName
    $newCPM = $value.NewManagingCPM
    $newLocation = $value.NewLocation
    $newOLACEnabled = $value.NewOLACEnabled
    $newNumberOfVersionsRetention = $value.NewNumberOfVersionsRetention
    $newNumberOfDaysRetention = $value.NewNumberOfDaysRetention

    $updateSafeURL = $PVWAURL + "/api/Safes/$safeName"
    $getSafeDetailsURL = $PVWAURL + "/api/safes/$safeName"

    try {
        $getSafeDetailsInvoke = Invoke-RestMethod -Method Get -Headers $logonHeader -ContentType "application/json" -Uri $getSafeDetailsURL -ErrorAction Stop
    } catch {
        Write-Host $_.Exception.Message -ForegroundColor Yellow
        LogMessage -Message "Failed to fetch safe details for $safeName"
        continue
    }

    if (-not $getSafeDetailsInvoke.SafeName) {
        Write-Host "Failed to find safe $safeName. Please check if the safe name exists in the vault or check the spelling of the safe and try again." -ForegroundColor Yellow 
        LogMessage -Message "Error: Failed to find safe $safeName."
        continue
    }

    if (-not [string]::IsNullOrEmpty($newDescription)) {
        $updateDescriptionBody = @{
            safeName = $safeName
            Description = $newDescription
            location = $getSafeDetailsInvoke.Location
            creator = @{}
            OLACEnabled = $getSafeDetailsInvoke.OLACEnabled
            ManagingCPM = $getSafeDetailsInvoke.ManagingCPM
            numberOfDaysRetention = $getSafeDetailsInvoke.NumberOfDaysRetention
        } | ConvertTo-Json

        try {
            $updateDescription = Invoke-RestMethod -Method Put -Uri $updateSafeURL -Headers $logonHeader -Body $updateDescriptionBody -ContentType "application/json" -ErrorAction Stop 
            LogMessage -Message "Description for safe $safeName has been updated successfully."
        } catch {
            Write-Host $_.Exception.Message -ForegroundColor Yellow
            LogMessage -Message "Failed to update description for safe $safeName."
        }
    }

    if (-not [string]::IsNullOrEmpty($newLocation)) {
        $newLocationBody = @{
            safeName = $safeName
            Description = $getSafeDetailsInvoke.Description
            location = $newLocation
            creator = @{}
            OLACEnabled = $getSafeDetailsInvoke.OLACEnabled
            ManagingCPM = $getSafeDetailsInvoke.ManagingCPM
            numberOfDaysRetention = $getSafeDetailsInvoke.NumberOfDaysRetention
        } | ConvertTo-Json

        try {
            $updateLocation = Invoke-RestMethod -Method Put -Uri $updateSafeURL -Headers $logonHeader -Body $newLocationBody -ContentType "application/json" -ErrorAction Stop
            LogMessage -Message "Location for safe $safeName has been updated successfully."
        } catch {
            Write-Host $_.Exception.Message -ForegroundColor Yellow
            LogMessage -Message "Failed to update location for safe $safeName."
        }
    }
}
